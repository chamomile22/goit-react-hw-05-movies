{"version":3,"file":"static/js/96.de9df75e.chunk.js","mappings":"wQAEaA,EAAUC,EAAAA,EAAAA,IAAH,4EAKPC,EAAUD,EAAAA,EAAAA,GAAH,kHAOPE,EAAmBF,EAAAA,EAAAA,GAAH,sQAahBG,EAAmBH,EAAAA,EAAAA,GAAH,mGAMhBI,EAAYJ,EAAAA,EAAAA,EAAH,iRAiBTK,EAAUL,EAAAA,EAAAA,EAAH,yG,mBCJpB,EAhCoB,WAClB,OAA8BM,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QASR,OARAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAuBH,GACpBI,MAAK,SAAAC,GAAI,OAAIN,EAAWM,EAAKC,QAApB,IACTC,OAAM,kBACLC,EAAAA,GAAAA,MAAY,sDADP,GAGV,GAAE,CAACR,KAGF,UAACV,EAAD,YACE,SAACE,EAAD,UAAS,YACRM,EAAQW,OAAS,GAChB,SAAChB,EAAD,UACGK,EAAQY,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,UAACnB,EAAD,YACE,UAACC,EAAD,WAAW,WAASiB,MACpB,SAAChB,EAAD,UAAUiB,MAFWF,EAK1B,OAGH,SAAC,IAAD,UAAQ,uBAIf,C,sEC1CYG,E,QAASvB,EAAAA,EAAH,wJ,wJCFnB,IAAMwB,EAAW,gCAEXC,EAAe,IAAIC,gBAAgB,CACvCC,OAAQ,MACRC,QAAS,mCACTC,SAAU,QACVC,eAAe,EACfC,QAAS,CACPC,OAAQ,sBAICC,EAAoB,WAE/B,OAAOC,MAAM,GAAD,OAAIV,GAAJ,OADC,qBACD,YAAuBC,IAAgBZ,MAAK,SAAAsB,GACtD,GAAIA,EAAIC,GACN,OAAOD,EAAIE,MAEd,GACF,EAEYC,EAAkB,SAAAC,GAE7B,OAAOL,MAAM,GAAD,OAAIV,GAAJ,OADC,eACD,YAAuBC,EAAvB,kBAA6Cc,IAAS1B,MAChE,SAAAsB,GACE,GAAIA,EAAIC,GACN,OAAOD,EAAIE,MAEd,GAEJ,EAEYG,EAAkB,SAAApB,GAC7B,IAAMqB,EAAI,gBAAYrB,GACtB,OAAOc,MAAM,GAAD,OAAIV,GAAJ,OAAeiB,EAAf,YAAuBhB,IAAgBZ,MAAK,SAAAsB,GACtD,GAAIA,EAAIC,GACN,OAAOD,EAAIE,MAEd,GACF,EAEYK,EAAsB,SAAAtB,GACjC,IAAMqB,EAAI,gBAAYrB,EAAZ,YACV,OAAOc,MAAM,GAAD,OAAIV,GAAJ,OAAeiB,EAAf,YAAuBhB,IAAgBZ,MAAK,SAAAsB,GACtD,GAAIA,EAAIC,GACN,OAAOD,EAAIE,MAEd,GACF,EAEYzB,EAAyB,SAAAQ,GACpC,IAAMqB,EAAI,gBAAYrB,EAAZ,YACV,OAAOc,MAAM,GAAD,OAAIV,GAAJ,OAAeiB,EAAf,YAAuBhB,IAAgBZ,MAAK,SAAAsB,GACtD,GAAIA,EAAIC,GACN,OAAOD,EAAIE,MAEd,GACF,C","sources":["components/ReviewsList/ReviewsList.styled.jsx","components/ReviewsList/ReviewsList.jsx","components/no-info/NoInfoText.styled.jsx","servises/fetchMovies.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  padding-top: 10px;\n  background-color: #750d0d;\n`;\n\nexport const Heading = styled.h2`\n  text-transform: uppercase;\n  text-align: center;\n  font-size: 20px;\n  color: white;\n`;\n\nexport const MovieReviewsList = styled.ul`\n  list-style: none;\n  margin-top: 20px;\n  padding-left: 20px;\n  padding-right: 20px;\n  padding-bottom: 50px;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: auto;\n  grid-row-gap: 15px;\n  align-items: start;\n`;\n\nexport const MovieReviewsItem = styled.li`\n  padding: 20px 25px;\n  background-color: white;\n  border-radius: 10px;\n`;\n\nexport const ActorName = styled.p`\n  font-size: 19px;\n  font-weight: 700;\n  color: #818181;\n  position: relative;\n\n  &::before {\n    position: absolute;\n    left: 0;\n    top: 26px;\n    content: '';\n    width: 400px;\n    height: 1.5px;\n    background-color: #ca2c2c;\n  }\n`;\n\nexport const Content = styled.p`\n  margin-top: 13px;\n  color: #000000;\n  font-size: 15px;\n  font-weight: 500;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMovieDetailsReviews } from 'servises/fetchMovies';\nimport {\n  ActorName,\n  Content,\n  Heading,\n  MovieReviewsItem,\n  MovieReviewsList,\n  Wrapper,\n} from './ReviewsList.styled';\nimport { NoInfo } from 'components/no-info/NoInfoText.styled';\n\nconst ReviewsList = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    getMovieDetailsReviews(movieId)\n      .then(data => setReviews(data.results))\n      .catch(() =>\n        toast.error('Woops, something went wrong, please try again later')\n      );\n  }, [movieId]);\n\n  return (\n    <Wrapper>\n      <Heading>Reviews</Heading>\n      {reviews.length > 0 ? (\n        <MovieReviewsList>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <MovieReviewsItem key={id}>\n                <ActorName>Author: {author}</ActorName>\n                <Content>{content}</Content>\n              </MovieReviewsItem>\n            );\n          })}\n        </MovieReviewsList>\n      ) : (\n        <NoInfo>No reviews found</NoInfo>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ReviewsList;\n","import styled from '@emotion/styled';\n\nexport const NoInfo = styled.p`\n  margin-top: 20px;\n  padding-bottom: 20px;\n  text-align: center;\n  font-size: 17px;\n  font-weight: 600;\n  color: #c1c1c1;\n`;\n","const BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst searchParams = new URLSearchParams({\n  method: 'GET',\n  api_key: '699a8a8a6315fbf58e6f205efaa3a1e3',\n  language: 'en-US',\n  include_adult: false,\n  headers: {\n    accept: 'application/json',\n  },\n});\n\nexport const getTrendingMovies = () => {\n  const path = 'trending/movie/day';\n  return fetch(`${BASE_URL}${path}?${searchParams}`).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  });\n};\n\nexport const getMoviesByName = query => {\n  const path = 'search/movie';\n  return fetch(`${BASE_URL}${path}?${searchParams}&query=${query}`).then(\n    res => {\n      if (res.ok) {\n        return res.json();\n      }\n    }\n  );\n};\n\nexport const getMovieDetails = id => {\n  const path = `movie/${id}`;\n  return fetch(`${BASE_URL}${path}?${searchParams}`).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  });\n};\n\nexport const getMovieDetailsCast = id => {\n  const path = `movie/${id}/credits`;\n  return fetch(`${BASE_URL}${path}?${searchParams}`).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  });\n};\n\nexport const getMovieDetailsReviews = id => {\n  const path = `movie/${id}/reviews`;\n  return fetch(`${BASE_URL}${path}?${searchParams}`).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  });\n};\n"],"names":["Wrapper","styled","Heading","MovieReviewsList","MovieReviewsItem","ActorName","Content","useState","reviews","setReviews","movieId","useParams","useEffect","getMovieDetailsReviews","then","data","results","catch","toast","length","map","id","author","content","NoInfo","BASE_URL","searchParams","URLSearchParams","method","api_key","language","include_adult","headers","accept","getTrendingMovies","fetch","res","ok","json","getMoviesByName","query","getMovieDetails","path","getMovieDetailsCast"],"sourceRoot":""}