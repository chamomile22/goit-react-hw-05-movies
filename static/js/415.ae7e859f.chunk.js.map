{"version":3,"file":"static/js/415.ae7e859f.chunk.js","mappings":"wKA6CA,IAlCkB,SAAC,GAAgB,IAE7BA,EAFeC,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAAC,KAAD,WACE,SAAC,KAAD,UACGF,EAAOG,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAIxB,OAHAP,EAASO,EAAW,yCACkBA,GAClC,gCAEF,SAAC,KAAD,WACE,UAAC,KAAD,CAAWC,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAA/C,WACE,SAAC,KAAD,CAAaS,IAAKX,EAAQY,IAAKN,EAAOO,MAAM,SAC5C,SAAC,KAAD,UAAaP,QAHDD,EAOnB,OAIR,C,uPC9BYS,EAAUC,EAAAA,EAAAA,QAAH,qEAKPC,EAAUD,EAAAA,EAAAA,GAAH,sHAOPE,EAAiBF,EAAAA,EAAAA,GAAH,0OAWdG,EAAYH,EAAAA,EAAAA,GAAH,sEAKTI,EAAaJ,EAAAA,EAAAA,EAAH,6CAIVK,EAAcL,EAAAA,EAAAA,IAAH,+CAIXM,GAAYN,EAAAA,EAAAA,GAAOO,EAAAA,GAAPP,CAAH,yP,uGCdtB,UAnBa,WACX,OAA4BQ,EAAAA,EAAAA,UAAS,IAArC,eAAOtB,EAAP,KAAeuB,EAAf,KAUA,OARAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MACGC,MAAK,SAAAC,GAAI,OAAIJ,EAAUI,EAAKC,QAAnB,IACTC,OAAM,kBACLC,EAAAA,GAAAA,MAAY,sDADP,GAGV,GAAE,KAGD,iCACE,SAAC,KAAD,UAAS,eACT,SAAC,IAAD,CAAW9B,OAAQA,MAGxB,C,wJCvBD,IAAM+B,EAAW,gCAEXC,EAAe,IAAIC,gBAAgB,CACvCC,OAAQ,MACRC,QAAS,mCACTC,SAAU,QACVC,eAAe,EACfC,QAAS,CACPC,OAAQ,sBAICd,EAAoB,WAE/B,OAAOe,MAAM,GAAD,OAAIT,GAAJ,OADC,qBACD,YAAuBC,IAAgBN,MAAK,SAAAe,GACtD,GAAIA,EAAIC,GACN,OAAOD,EAAIE,MAEd,GACF,EAEYC,EAAkB,SAAAC,GAE7B,OAAOL,MAAM,GAAD,OAAIT,GAAJ,OADC,eACD,YAAuBC,EAAvB,kBAA6Ca,IAASnB,MAChE,SAAAe,GACE,GAAIA,EAAIC,GACN,OAAOD,EAAIE,MAEd,GAEJ,EAEYG,EAAkB,SAAA1C,GAC7B,IAAM2C,EAAI,gBAAY3C,GACtB,OAAOoC,MAAM,GAAD,OAAIT,GAAJ,OAAegB,EAAf,YAAuBf,IAAgBN,MAAK,SAAAe,GACtD,GAAIA,EAAIC,GACN,OAAOD,EAAIE,MAEd,GACF,EAEYK,EAAsB,SAAA5C,GACjC,IAAM2C,EAAI,gBAAY3C,EAAZ,YACV,OAAOoC,MAAM,GAAD,OAAIT,GAAJ,OAAegB,EAAf,YAAuBf,IAAgBN,MAAK,SAAAe,GACtD,GAAIA,EAAIC,GACN,OAAOD,EAAIE,MAEd,GACF,EAEYM,EAAyB,SAAA7C,GACpC,IAAM2C,EAAI,gBAAY3C,EAAZ,YACV,OAAOoC,MAAM,GAAD,OAAIT,GAAJ,OAAegB,EAAf,YAAuBf,IAAgBN,MAAK,SAAAe,GACtD,GAAIA,EAAIC,GACN,OAAOD,EAAIE,MAEd,GACF,C","sources":["components/MovieList/MovieList.jsx","components/MovieList/MovieList.styled.jsx","pages/Home.jsx","servises/fetchMovies.js"],"sourcesContent":["import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  Section,\n  MovieItemsList,\n  MovieItem,\n  MovieLink,\n  MovieTitle,\n  MoviePoster,\n} from './MovieList.styled';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  let poster;\n  return (\n    <Section>\n      <MovieItemsList>\n        {movies.map(({ id, title, poster_path }) => {\n          poster = poster_path\n            ? `https://image.tmdb.org/t/p/w200${poster_path}`\n            : 'https://placehold.co/200x300';\n          return (\n            <MovieItem key={id}>\n              <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n                <MoviePoster src={poster} alt={title} width=\"150\" />\n                <MovieTitle>{title}</MovieTitle>\n              </MovieLink>\n            </MovieItem>\n          );\n        })}\n      </MovieItemsList>\n    </Section>\n  );\n};\n\nMovieList.propTypes = {\n  movie: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default MovieList;\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const Section = styled.section`\n  margin-top: 20px;\n  margin-bottom: 30px;\n`;\n\nexport const Heading = styled.h2`\n  margin-top: 10px;\n  text-transform: uppercase;\n  text-align: center;\n  font-size: 20px;\n`;\n\nexport const MovieItemsList = styled.ul`\n  padding-right: 30px;\n  padding-left: 30px;\n  padding-bottom: 50px;\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: auto;\n  grid-column-gap: 15px;\n  grid-row-gap: 15px;\n`;\n\nexport const MovieItem = styled.li`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const MovieTitle = styled.p`\n  max-width: 150px;\n`;\n\nexport const MoviePoster = styled.img`\n  border-radius: 8px;\n`;\n\nexport const MovieLink = styled(NavLink)`\n  color: #000000;\n  font-weight: 700;\n  transition: color 250ms ease-in-out;\n\n  &:hover,\n  &:focus {\n    color: #c02828;\n  }\n\n  &:hover + MoviePoster,\n  &:focus + MoviePoster {\n    box-shadow: 0 0 10px black;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { getTrendingMovies } from 'servises/fetchMovies';\nimport { toast } from 'react-toastify';\nimport MovieList from 'components/MovieList/MovieList';\nimport { Heading } from 'components/MovieList/MovieList.styled';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    getTrendingMovies()\n      .then(data => setMovies(data.results))\n      .catch(() =>\n        toast.error('Woops, something went wrong, please try again later')\n      );\n  }, []);\n\n  return (\n    <>\n      <Heading>Top today</Heading>\n      <MovieList movies={movies} />\n    </>\n  );\n};\n\nexport default Home;\n","const BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst searchParams = new URLSearchParams({\n  method: 'GET',\n  api_key: '699a8a8a6315fbf58e6f205efaa3a1e3',\n  language: 'en-US',\n  include_adult: false,\n  headers: {\n    accept: 'application/json',\n  },\n});\n\nexport const getTrendingMovies = () => {\n  const path = 'trending/movie/day';\n  return fetch(`${BASE_URL}${path}?${searchParams}`).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  });\n};\n\nexport const getMoviesByName = query => {\n  const path = 'search/movie';\n  return fetch(`${BASE_URL}${path}?${searchParams}&query=${query}`).then(\n    res => {\n      if (res.ok) {\n        return res.json();\n      }\n    }\n  );\n};\n\nexport const getMovieDetails = id => {\n  const path = `movie/${id}`;\n  return fetch(`${BASE_URL}${path}?${searchParams}`).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  });\n};\n\nexport const getMovieDetailsCast = id => {\n  const path = `movie/${id}/credits`;\n  return fetch(`${BASE_URL}${path}?${searchParams}`).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  });\n};\n\nexport const getMovieDetailsReviews = id => {\n  const path = `movie/${id}/reviews`;\n  return fetch(`${BASE_URL}${path}?${searchParams}`).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  });\n};\n"],"names":["poster","movies","location","useLocation","map","id","title","poster_path","to","state","from","src","alt","width","Section","styled","Heading","MovieItemsList","MovieItem","MovieTitle","MoviePoster","MovieLink","NavLink","useState","setMovies","useEffect","getTrendingMovies","then","data","results","catch","toast","BASE_URL","searchParams","URLSearchParams","method","api_key","language","include_adult","headers","accept","fetch","res","ok","json","getMoviesByName","query","getMovieDetails","path","getMovieDetailsCast","getMovieDetailsReviews"],"sourceRoot":""}