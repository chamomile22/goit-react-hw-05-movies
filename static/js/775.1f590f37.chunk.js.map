{"version":3,"file":"static/js/775.1f590f37.chunk.js","mappings":"2QAEaA,EAAUC,EAAAA,EAAAA,IAAH,4EAKPC,EAAUD,EAAAA,EAAAA,GAAH,kHAOPE,EAAgBF,EAAAA,EAAAA,GAAH,2SAcbG,EAAgBH,EAAAA,EAAAA,GAAH,wMAWbI,EAASJ,EAAAA,EAAAA,IAAH,yGAMNK,EAAYL,EAAAA,EAAAA,EAAH,6GAMTM,EAAYN,EAAAA,EAAAA,EAAH,oJ,mBCMtB,EA1CiB,WACf,IAUIO,EAVJ,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAWR,OAVAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAoBH,GACjBI,MAAK,SAAAC,GAAI,OAAIN,EAAQM,EAAKP,KAAjB,IACTQ,OAAM,kBACLC,EAAAA,GAAAA,MAAY,sDADP,GAGV,GAAE,CAACP,KAKF,UAACZ,EAAD,YACE,SAACE,EAAD,UAAS,SACRQ,EAAKU,OAAS,GACb,SAACjB,EAAD,UACGO,EAAKW,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAIhC,OAHAjB,EAASiB,EAAY,yCACiBA,GAClC,gCAEF,UAACrB,EAAD,YACE,SAACC,EAAD,CACEqB,IAAKlB,EACLmB,IAAG,UAAKJ,EAAL,aAAcC,GACjBI,MAAM,SAER,SAACtB,EAAD,UAAYiB,KACZ,SAAChB,EAAD,UAAYiB,MAPMF,EAUvB,OAGH,SAAC,IAAD,UAAQ,sCAIf,C,sECrDYO,E,QAAS5B,EAAAA,EAAH,wJ,wJCFnB,IAAM6B,EAAW,gCAEXC,EAAe,IAAIC,gBAAgB,CACvCC,OAAQ,MACRC,QAAS,mCACTC,SAAU,QACVC,eAAe,EACfC,QAAS,CACPC,OAAQ,sBAICC,EAAoB,WAE/B,OAAOC,MAAM,GAAD,OAAIV,GAAJ,OADC,qBACD,YAAuBC,IAAgBf,MAAK,SAAAyB,GACtD,GAAIA,EAAIC,GACN,OAAOD,EAAIE,MAEd,GACF,EAEYC,EAAkB,SAAAC,GAE7B,OAAOL,MAAM,GAAD,OAAIV,GAAJ,OADC,eACD,YAAuBC,EAAvB,kBAA6Cc,IAAS7B,MAChE,SAAAyB,GACE,GAAIA,EAAIC,GACN,OAAOD,EAAIE,MAEd,GAEJ,EAEYG,EAAkB,SAAAxB,GAC7B,IAAMyB,EAAI,gBAAYzB,GACtB,OAAOkB,MAAM,GAAD,OAAIV,GAAJ,OAAeiB,EAAf,YAAuBhB,IAAgBf,MAAK,SAAAyB,GACtD,GAAIA,EAAIC,GACN,OAAOD,EAAIE,MAEd,GACF,EAEY5B,EAAsB,SAAAO,GACjC,IAAMyB,EAAI,gBAAYzB,EAAZ,YACV,OAAOkB,MAAM,GAAD,OAAIV,GAAJ,OAAeiB,EAAf,YAAuBhB,IAAgBf,MAAK,SAAAyB,GACtD,GAAIA,EAAIC,GACN,OAAOD,EAAIE,MAEd,GACF,EAEYK,EAAyB,SAAA1B,GACpC,IAAMyB,EAAI,gBAAYzB,EAAZ,YACV,OAAOkB,MAAM,GAAD,OAAIV,GAAJ,OAAeiB,EAAf,YAAuBhB,IAAgBf,MAAK,SAAAyB,GACtD,GAAIA,EAAIC,GACN,OAAOD,EAAIE,MAEd,GACF,C","sources":["components/CastList/CastList.styled.jsx","components/CastList/CastList.jsx","components/no-info/NoInfoText.styled.jsx","servises/fetchMovies.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  padding-top: 10px;\n  background-color: #750d0d;\n`;\n\nexport const Heading = styled.h2`\n  text-transform: uppercase;\n  text-align: center;\n  font-size: 20px;\n  color: white;\n`;\n\nexport const MovieCastList = styled.ul`\n  list-style: none;\n  margin-top: 20px;\n  padding-left: 20px;\n  padding-right: 20px;\n  padding-bottom: 50px;\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  grid-template-rows: auto;\n  grid-column-gap: 15px;\n  grid-row-gap: 27px;\n  align-items: start;\n`;\n\nexport const MovieCastItem = styled.li`\n  width: 100%;\n  height: 100%;\n  padding-top: 10px;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  background-color: white;\n  border-radius: 10px;\n`;\n\nexport const Avatar = styled.img`\n  border-radius: 8px;\n  margin-bottom: 8px;\n  box-shadow: 0 0 10px #0000006b;\n`;\n\nexport const ActorName = styled.p`\n  max-width: 150px;\n  font-size: 16px;\n  font-weight: 700;\n  text-align: center;\n`;\nexport const Character = styled.p`\n  margin-top: 4px;\n  max-width: 150px;\n  color: #9b9b9b;\n  font-size: 15px;\n  font-weight: 700;\n  text-align: center;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMovieDetailsCast } from 'servises/fetchMovies';\nimport {\n  ActorName,\n  Avatar,\n  Character,\n  Heading,\n  MovieCastItem,\n  MovieCastList,\n  Wrapper,\n} from './CastList.styled';\nimport { NoInfo } from 'components/no-info/NoInfoText.styled';\n\nconst CastList = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    getMovieDetailsCast(movieId)\n      .then(data => setCast(data.cast))\n      .catch(() =>\n        toast.error('Woops, something went wrong, please try again later')\n      );\n  }, [movieId]);\n\n  let poster;\n\n  return (\n    <Wrapper>\n      <Heading>Cast</Heading>\n      {cast.length > 0 ? (\n        <MovieCastList>\n          {cast.map(({ id, name, character, profile_path }) => {\n            poster = profile_path\n              ? `https://image.tmdb.org/t/p/w500${profile_path}`\n              : 'https://placehold.co/150x220';\n            return (\n              <MovieCastItem key={id}>\n                <Avatar\n                  src={poster}\n                  alt={`${name}, ${character}`}\n                  width=\"150\"\n                />\n                <ActorName>{name}</ActorName>\n                <Character>{character}</Character>\n              </MovieCastItem>\n            );\n          })}\n        </MovieCastList>\n      ) : (\n        <NoInfo>No information about cast found</NoInfo>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default CastList;\n","import styled from '@emotion/styled';\n\nexport const NoInfo = styled.p`\n  margin-top: 20px;\n  padding-bottom: 20px;\n  text-align: center;\n  font-size: 17px;\n  font-weight: 600;\n  color: #c1c1c1;\n`;\n","const BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst searchParams = new URLSearchParams({\n  method: 'GET',\n  api_key: '699a8a8a6315fbf58e6f205efaa3a1e3',\n  language: 'en-US',\n  include_adult: false,\n  headers: {\n    accept: 'application/json',\n  },\n});\n\nexport const getTrendingMovies = () => {\n  const path = 'trending/movie/day';\n  return fetch(`${BASE_URL}${path}?${searchParams}`).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  });\n};\n\nexport const getMoviesByName = query => {\n  const path = 'search/movie';\n  return fetch(`${BASE_URL}${path}?${searchParams}&query=${query}`).then(\n    res => {\n      if (res.ok) {\n        return res.json();\n      }\n    }\n  );\n};\n\nexport const getMovieDetails = id => {\n  const path = `movie/${id}`;\n  return fetch(`${BASE_URL}${path}?${searchParams}`).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  });\n};\n\nexport const getMovieDetailsCast = id => {\n  const path = `movie/${id}/credits`;\n  return fetch(`${BASE_URL}${path}?${searchParams}`).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  });\n};\n\nexport const getMovieDetailsReviews = id => {\n  const path = `movie/${id}/reviews`;\n  return fetch(`${BASE_URL}${path}?${searchParams}`).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  });\n};\n"],"names":["Wrapper","styled","Heading","MovieCastList","MovieCastItem","Avatar","ActorName","Character","poster","useState","cast","setCast","movieId","useParams","useEffect","getMovieDetailsCast","then","data","catch","toast","length","map","id","name","character","profile_path","src","alt","width","NoInfo","BASE_URL","searchParams","URLSearchParams","method","api_key","language","include_adult","headers","accept","getTrendingMovies","fetch","res","ok","json","getMoviesByName","query","getMovieDetails","path","getMovieDetailsReviews"],"sourceRoot":""}